# PHP CircleCI 2.0 configuration file
# See: https://circleci.com/docs/2.0/language-php/
version: 2

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      # Specify the version you desire here
      - image: circleci/php:7.3-node-browsers
        environment:
          - APP_DEBUG: true
          - APP_ENV: ci-testing
          - APP_KEY: base64:j0QhjXx+TEDfE5lgUCM//HMHlR95Mh26f7CEdFtcv9U=
          - DB_CONNECTION: mysql
          - DB_DATABASE: circle_test
          - DB_USERNAME: root
      - image: circleci/mysql:5.7
        environment:
          - MYSQL_DATABASE: circle_test
          - MYSQL_ALLOW_EMPTY_PASSWORD: true
          - MYSQL_ROOT_HOST: "%"

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # Using the RAM variation mitigates I/O contention
      # for database intensive operations.
      # - image: circleci/mysql:5.7-ram
      #
      # - image: redis:2.8.19

    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - run: wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
      - run: sudo apt update # PHP CircleCI 2.0 Configuration File# PHP CircleCI 2.0 Configuration File sudo apt install zlib1g-dev libsqlite3-dev
      - run: sudo apt-get update
      - run: sudo docker-php-ext-install zip pdo_mysql

      # Download and cache dependencies
      - restore_cache:
          keys:
            # "composer.lock" can be used if it is committed to the repo
            - v1-dependencies-{{ checksum "composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: composer install -n --prefer-dist

      - save_cache:
          key: v1-dependencies-{{ checksum "composer.json" }}
          paths:
            - ./vendor
      - restore_cache:
          keys:
            - node-v1-{{ checksum "package.json" }}
            - node-v1-
      - run: yarn install
      - save_cache:
          key: node-v1-{{ checksum "package.json" }}
          paths:
            - node_modules

      # prepare the database
      - run: php artisan config:clear
      - run: php artisan config:cache
      - run: php artisan migrate
      - run: php artisan db:seed

      # run tests with phpunit or codecept
      - run: ./vendor/bin/phpunit
      - run: ./vendor/bin/phpstan analyse --memory-limit=2G
      # FIXME: セキュリティチェックにひっかると exit status 1 になるため、一旦 disable にしている
      - run: php artisan insights --no-interaction --disable-security-check --min-quality=70 --min-complexity=70 --min-architecture=70 --min-style=70
  deploy:
    machine:
      image: circleci/classic:edge
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "${KEY_FINGERPRINT}"
      - run: ssh -o StrictHostKeyChecking=no ${USER_NAME}@${HOST_NAME} 'cd /var/www/OKR-manage-app/ && git checkout main && git pull && composer install --no-scripts --no-interaction && php artisan config:clear && php artisan config:cache && php artisan migrate && php artisan storage:link'

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: main
